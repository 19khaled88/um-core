// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_department")
}

model Student {
  id                   String             @id @default(uuid())
  studentId            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String
  dateOfBirth          String
  emergencyContactNo   String
  permanentAddress     String
  presentAddress       String
  contactNo            String
  gender               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  users                User[]

  @@map("students")
}

model User {
  id                String   @id @default(uuid())
  role              String
  password          String
  needsPassChange   Boolean  @default(true)
  passwordChangedAt DateTime
  students          Student? @relation(fields: [studentId], references: [id])
  studentId         String?  @unique
  faculties         Faculty? @relation(fields: [facultyId], references: [id])
  facultyId         String?
  admins            Admin?   @relation(fields: [adminId], references: [id])
  adminId           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("users")
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String
  dateOfBirth          String
  emergencyContactNo   String
  permanentAddress     String
  presentAddress       String
  contactNo            String
  gender               String
  bloodGroup           String
  designation          String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  users                User[]
  courseFaculties      CourseFaculty[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  creadits        Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  curseFaculties  CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
  @@map("course_prerequisite")
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model Admin {
  id                     String               @id @default(uuid())
  firstName              String
  lastName               String
  middleName             String
  profileImage           String
  email                  String
  dateOfBirth            String
  emergencyContactNo     String
  permanentAddress       String
  presentAddress         String
  contactNo              String
  gender                 String
  bloodGroup             String
  designation            String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  managementDepartments  ManagementDepartment @relation(fields: [managementDepartmentId], references: [id])
  managementDepartmentId String
  User                   User[]

  @@map("admins")
}

model ManagementDepartment {
  id        String   @id @default(uuid())
  title     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admins    Admin[]

  @@map("managementdepartments")
}

model Auth {
  userId   String @id
  password String

  @@map("auths")
}

model SemesterRegistration {
  id                 String                      @id @default(uuid())
  startDate          DateTime
  endDate            DateTime
  status             SemesterRegistrationStatus? @default(UPCOMING)
  minCredit          Int                         @default(0)
  maxCredit          Int                         @default(0)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  academicSemesterId String
  academicSemester   AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  offeredCourses     OfferedCourse[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id String @id @default(uuid())

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("offered_courses")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
